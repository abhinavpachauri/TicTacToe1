package {	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.geom.Point;	public class GameScreen extends MovieClip {		private var turn:int; // whose turn is it right now		private var x_cells:Array = new Array(); // which cells contains X		private var o_cells:Array = new Array(); // which cells contains O		private var win:Array = new Array(new Array(0, 1, 2),										  new Array(3, 4, 5),										  new Array(6, 7, 8),										  new Array(0, 3, 6),		  								  new Array(1, 4, 7),										  new Array(2, 5, 8),										  new Array(0, 4, 8),										  new Array(2, 4, 6)); // which cell combinations means a win for either player		public function GameScreen() {			turn = 0; // O has first turn			stage.addEventListener(MouseEvent.CLICK, HandleMouseClick); // start listening for mouse clicks		}		private function HandleMouseClick(e:MouseEvent) : void {			// Don't process the click if it is outside grid			if (IsClickOutsideGrid())				return;			// Display X or O for current turn			ShowXOrO();			// end the game if a player has won or the game is a tie			EndGameOnWinOrDraw();			// next player's turn			turn ++;		}		private function IsClickOutsideGrid() : Boolean {			if (mouseX < 0 || mouseY < 0 || mouseX > 300 || mouseY > 300)				return true;			return false;		}				private function ShowXOrO() {			var rowIndex:int = mouseX / 100; // In 3x3 grid, what is the row number			var colIndex:int = mouseY / 100; // In 3x3 grid, what is the column number			var cellIndex = colIndex * 3 + rowIndex; // In 3x3 grid, what is the absolute cell value from 0 to 8			// return if the cell already contains either X or O			if (x_cells.indexOf(cellIndex) != -1 || o_cells.indexOf(cellIndex) != -1)				return;			var pos:Point = new Point(rowIndex * 100 + 25, colIndex * 100 + 25); // symbol position			var turnSymbol:String = turn % 2 == 0 ? "O" : "X"; // what is the current symbol			// Create a new symbol object and set its position			// addChild will start showing the symbol			// x_cells or o_cells now has one more symbol which has been added			if (turnSymbol == "X") {				var symbolX:X = new X();				symbolX.x = pos.x;				symbolX.y = pos.y;				addChild(symbolX);				x_cells.push(cellIndex);			} else if (turnSymbol == "O") {				var symbolO:O = new O();				symbolO.x = pos.x;				symbolO.y = pos.y;				addChild(symbolO);				o_cells.push(cellIndex);							}					}		private function EndGameOnWinOrDraw() {			for (var i:int = 0; i < win.length; i++) {				var xwin:Boolean = true; // assume x has won				var owin:Boolean = true; // assume y has won				// each possible win combination is checked against filled x_cells and o_cells				for (var j:int = 0; j < win[i].length; j++) {					xwin = xwin && x_cells.indexOf(win[i][j]) != -1;					owin = owin && o_cells.indexOf(win[i][j]) != -1;				}				if (xwin || owin) {					EndGame();					return;				}			}			// if all cells have been filled, then end the game			if (x_cells.length + o_cells.length == 9)				EndGame();		}		private function EndGame() {			stage.removeEventListener(MouseEvent.CLICK, HandleMouseClick); // stop listening for mouse clicks		}	}}